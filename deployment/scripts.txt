

#Image Build and upload to ECR
=============================

export ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
export REPOSITORY=llm_tpg1
export TAG=latest
export REGION="us-east-1"

export FUNCTION_NAME=translator_playground
export IAM_ROLE_FOR_LAMBDA=bedrock-lambda-role

REST_API_NAME="llm_pg"
DESCRIPTION="LLM Playground for Language translators"


docker build -t $ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$REPOSITORY:$TAG . --no-cache

aws ecr get-login-password --region us-east-1 | docker login -u AWS --password-stdin $ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com
aws ecr create-repository --repository-name $REPOSITORY --image-scanning-configuration scanOnPush=true --image-tag-mutability MUTABLE

docker tag llm_tpg:latest 823159980483.dkr.ecr.us-east-1.amazonaws.com/llm_tpg:latest
docker push $ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$REPOSITORY:$TAG

#Lambda Function
=================


aws lambda delete-function  --function-name $FUNCTION_NAME 
lambda_arn=$(aws lambda create-function --package-type Image --function-name $FUNCTION_NAME --code ImageUri=$ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$REPOSITORY:$TAG --role arn:aws:iam::$ACCOUNT_ID\:role/$IAM_ROLE_FOR_LAMBDA --query 'FunctionArn' --output text)
# aws lambda delete-function  --function-name $FUNCTION_NAME 
echo $lambda_arn

#API_Gateway

aws apigateway delete-rest-api --rest-api-id $rest_api_id 
rest_api_id=$(aws apigateway create-rest-api --name $REST_API_NAME --description "$DESCRIPTION" --query 'id' --output text --region $REGION )
echo $rest_api_id
resource_id=$(aws apigateway get-resources --rest-api-id $rest_api_id --query 'items[0].id' --output text --region $REGION )
echo $resource_id

# Attach the Lambda
aws apigateway put-method --rest-api-id $rest_api_id --resource-id $resource_id --http-method GET --authorization-type NONE --region $REGION 
uri="arn:aws:apigateway:${REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:$REGION:${ACCOUNT_ID}:function:$FUNCTION_NAME/invocations"
echo $uri
aws apigateway put-integration --rest-api-id $rest_api_id --resource-id $resource_id --http-method GET --type AWS_PROXY --integration-http-method POST --uri  $uri --region $REGION 
aws apigateway create-deployment --rest-api-id $rest_api_id --stage-name prod --region $REGION 
endpoint_url="https://$(aws apigateway get-rest-apis --query 'items[0].id' --output text --region $REGION ).execute-api.$REGION.amazonaws.com/prod"
echo $endpoint_url

# Update the Lambda function with the API Gateway trigger
aws lambda add-permission --function-name $FUNCTION_NAME --statement-id apigateway-test-2 --action lambda:InvokeFunction --principal apigateway.amazonaws.com --source-arn "arn:aws:execute-api:${REGION}:$(aws sts get-caller-identity --query 'Account' --output text ):$rest_api_id/*/GET/" --region $REGION 
aws lambda create-event-source-mapping --function-name $FUNCTION_NAME --batch-size 1 --event-source-arn "arn:aws:execute-api:${REGION}:$(aws sts get-caller-identity --query 'Account' --output text ):$rest_api_id/*/GET/" --region ${REGION}